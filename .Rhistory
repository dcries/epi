cee3 <- callibrate(ypredee3,dem3,as.matrix(latentxee),as.matrix(ree),as.matrix(betaee),as.matrix(gammaee),nk,ng,nr,min=1500,max=4500)
ceei <- data.frame(t(apply(cbind(cee1,cee2,cee3),2,quantile,probs=c(0.025,0.5,0.975))))
names(ceei) <- c("Lower","Median","Upper")
ceei$Observed <- c(ypredee1,ypredee2,ypredee3)
ces1 <- callibrate(ypredes1,dem1,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-300,max=200)
ces2 <- callibrate(ypredes2,dem2,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-150,max=100)
ces3 <- callibrate(ypredes3,dem3,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-500,max=300)
cesi <- data.frame(t(apply(cbind(ces1,ces2,ces3),2,quantile,probs=c(0.025,0.5,0.975))))
names(cesi) <- c("Lower","Median","Upper")
cesi$Observed <- c(ypredes1,ypredes2,ypredes3)
dfcal <- data.frame(cbind(cee1,cee2,cee3,ces1,ces2,ces3))
names(dfcal) <- c("Calibrated EE 1","Calibrated EE 2","Calibrated EE 3","Calibrated ES 1","Calibrated ES 2","Calibrated ES 3")
mdfcal <- melt(dfcal)
mdfcal$obs <- c(rep(ypredee1,nr),rep(ypredee2,nr),rep(ypredee3,nr),rep(ypredes1,nr),rep(ypredes2,nr),rep(ypredes3,nr))
mdfcal$true <- c(rep(xtrueee1,nr),rep(xtrueee2,nr),rep(xtrueee3,nr),rep(xtruees1,nr),rep(xtruees2,nr),rep(xtruees3,nr))
ggplot(data=mdfcal) + geom_histogram(aes(x=value),bins=20) + geom_vline(aes(xintercept=obs),colour="red") + geom_vline(aes(xintercept=true),colour="blue",linetype=2) + facet_wrap(~variable,scales="free") + theme_bw()
names(ceei)[1:3] <- c("2.5%","50%","97.5%")
names(cesi)[1:3] <- c("2.5%","50%","97.5%")
ceei$Truth <- c(xee[100],xee[296],xee[184])
cesi$Truth <- c(xes[100],xes[296],xes[184])
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
mdfcal$obs
ypredee1
ypredee2
ypredee3
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
names(ceei)[1:3] <- c("2.5%","50%","97.5%")
names(cesi)[1:3] <- c("2.5%","50%","97.5%")
ceei$Truth <- c(xee[a],xee[296],xee[c])
cesi$Truth <- c(xes[a],xes[296],xes[c])
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
print(xtable(cesi,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap $\\Delta$ES measurements for Skewed Errors",label="calibratedes"),include.rownames=FALSE)
install.packages("stran")
install.packages("rstan")
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda = sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy = beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
library(rstan)
?stan
library(StanHeaders)
?stan
sessionInfo()
library(rstan)
sessionInfo()
library(rstan)
library(StanHeaders)
sessionInfo()
library(rstan)
sessionInfo()
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
library(inline)
fx <- cxxfunction(signature(x = "numeric"),'NumericVector xx(x);
return wrap(std::accumulate(xx.begin(), xx.end(), 0.0));',plugin = "Rcpp")
fx(c(1,2,3))
library(rstan)
library(ggplot2)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
?solve
library(rstan)
?stan
library(rstan)
model = "
data{
int<lower = 0> N; //number of individuals
int<lower = 0> K; //number of obs per individual
vector[K] Y[N];
vector[N] D;
cov_matrix[K] R;
}
parameters{
vector[K] a;
vector[K] b;
cov_matrix[K] Omega;
}
transformed parameters{
vector[K] mu[N];
for(k in 1:K){
for(i in 1:N){
mu[i, k] <- a[k] + b[k] * D[i];
}
}
}
model{
for(i in 1:N){
Y[i] ~ multi_normal(mu[i], Omega);
}
Omega ~ inv_wishart(K+1, R);
}
"
model = stan_model(model_code=model)
library(devtools)
install_github("jarad/FluSight")
install_github("erichare/discreteRV")
?install_github
library(ggplot2)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(ggplot2)
library(dplyr)
library(xtable)
library(reshape)
library(glmnet)
library(MASS)
setwd("\\\\my.files.iastate.edu\\Users\\dcries\\Desktop\\job_stuff\\bhd")
bhd <- read.csv("Clinical Data.csv")
install_github("dcries/bhd")
library(devtools)
install_github("dcries/bhd")
library(car)
m4 <- lm(LDL.C ~ Age+Total.C+HDL.C+Triglycerides+CRP,data=bhd)
crPlots(m4)
plot(predict(m4),resid(m4))
plot(predict(m4),resid(m4))
qqnorm(resid(m4));qqline(resid(m4))
qqnorm(resid(m4));qqline(resid(m4))
library(Rcpp)
library(MASS)
library(mvtnorm)
library(LaplacesDemon)
library(dplyr)
library(label.switching)
setwd("C:/Users/dcries/github/epi")
Rcpp::sourceCpp('mcmc_epi_mixture.cpp')
imp1 <- read.csv("NHANES_accel_imp1.csv")
load("../../workspace/stanout_imp1.RData")
rmat <- as.matrix(rs)
tstar <- rmat[,31:7903]
#nhanes <- read.csv("NHANES_complete.csv")
names(imp1) <- tolower(names(imp1))
imp1 <- subset(imp1,rep!=7)
nrep <- (imp1 %>% group_by(id) %>% summarise(n=length(id)))$n
meas7 <- subset(imp1, id %in% unique(id)[nrep==6] & (!is.na(imp1$education))) #individuals with all 7 days
tstar2 <- tstar[,complete.cases(meas7[!duplicated(meas7$id),]) & (meas7$bpd[!duplicated(meas7$id)] > 0)]
meas7 <- meas7[(!is.na(meas7$waist)) & (!is.na(meas7$bps)) & (!is.na(meas7$bpd)) & (!is.na(meas7$hdl)) & (!is.na(meas7$ldl)) & (!is.na(meas7$glu)) & (!is.na(meas7$tri)) & (!is.na(meas7$education)) & (meas7$bpd >0),] #remove NAs for waist
waist <- meas7$waist[!duplicated(meas7$id)]
lglu <- log(meas7$glu[!duplicated(meas7$id)])
ltri <- log(meas7$tri[!duplicated(meas7$id)])
bps <- (meas7$bps[!duplicated(meas7$id)])
ldl <- (meas7$ldl[!duplicated(meas7$id)])
bpd <- meas7$bpd[!duplicated(meas7$id)]
hdl <- (meas7$hdl[!duplicated(meas7$id)])
MetS <- (cbind(waist,lglu,ltri,bps,ldl,bpd,hdl))
K=5
start <- list(currentbeta=c(10.445,   3.230,   2.033 ,0.1642,3.4081,1.4433,#0.1642,3.4081,1.4433,
0.2805, 4.4733, 1.8297,  #log tri
#65.736,   1.412,   2.121, #tri
18.388,   4.602 ,  1.389 , #bps
#.138,4.247,1.387, #log bps
-6.3, #ldl
#-0.16, #sqrt(ldl)
2.3, #bpd
-3.3 #hdl
#-.02 #log(hdl)
),
currentlambda=matrix(c(rep(101.517,K),rep(4.7228,K),rep(4.9261,K),rep(138.480,K),
rep(10.84,K),rep(63,K),rep(3.99,K)),ncol=K,byrow=T),
Sigmadiag=matrix(rep(c(15^2,.16^2,.24^2,36^2,18^2,14^2,16^2),K),ncol=K,byrow=FALSE),
currentzeta=sample(0:(K-1),nrow(MetS),replace=TRUE,rep(1/K,K)),
currentpi=rep(1/K,K),
propcov=diag(15)*0.00001)
#start$currentlambda[,2] <- start$currentlambda[,2] + rnorm(nrow(start$currentlambda),rep(0,nrow(start$currentlambda)),0.15*start$currentlambda[,2])
#start$currentlambda[,1] <- start$currentlambda[,1]*.8
#start$Sigmadiag[,1] <- start$Sigmadiag[,1]*.6
prior <- list(bm=c(7,3,2.11,.16,3,2.11,.12,3,2.11,18,3,2.11,rep(0,3)),
bcov=diag(15)*c(8,1.5,.8,.08,1.5,.8,3,1.5,.8,5,1.5,.8,rep(100,3))^2,d=8,D=diag(7),
lm=c(98,4.7,4.73,130,0,0,0),
lcov=diag(7)*c(17,.1,.6,7,100,100,100)^2,
a=rep(1,K))
start$currentbeta <- start$currentbeta * 1.1
start$currentlambda <- start$currentlambda * 1.1
start$Sigmadiag <- start$Sigmadiag * 1.1
out5 = mcmc_epi_mixture(MetS,tstar2, start, prior, K,300000,50000,thin=10)
out5$dic
pmat <- array(0,dim=c(nrow(out5$beta),nrow(MetS),K))
for(i in 1:K){
for(j in 1:nrow(MetS)){
pmat[,j,i] <- out5$pmat[j,i,]
}
}
out5$pmat <- NULL
permutations=label.switching(c("ECR-ITERATIVE-1","ECR-ITERATIVE-2","STEPHENS"),
p=pmat,z=out5$zeta+1,K=K)
out5=list(out5=out5,permutations=permutations)
save(out5,file="../../workspace/stanout_mix5b.RData")
out5 = mcmc_epi_mixture(MetS,tstar2, start, prior, K,400000,100000,thin=10)
out5$dic
pmat <- array(0,dim=c(nrow(out5$beta),nrow(MetS),K))
for(i in 1:K){
for(j in 1:nrow(MetS)){
pmat[,j,i] <- out5$pmat[j,i,]
}
}
out5$pmat <- NULL
permutations=label.switching(c("ECR-ITERATIVE-1","ECR-ITERATIVE-2","STEPHENS"),
p=pmat,z=out5$zeta+1,K=K)
out5=list(out5=out5,permutations=permutations)
save(out5,file="../../workspace/stanout_mix5b.RData")
